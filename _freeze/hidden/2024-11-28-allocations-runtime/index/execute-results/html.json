{
  "hash": "dd3489d3d956b3f5df041243a77d76f3",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Faster `rank(::QRPivoted)` function\"\ndescription: \"Benchmarking implementations of rank functions\"\nauthor:\n  - name: Ajinkya Kokandakar\n    url: https://ajinkya-k.github.io/\n    orcid: 0000-0002-5300-3075\n    affiliation: University of Wisconsin, Madison\n    affiliation-url: https://www.wisc.edu/ \ndate: 11-28-2024\ncategories: [Julia, Linear Algebra] # self-defined categories\ncitation: \n  url: https://ajinkya-k.github.io/posts/2024-18-24-allocations-runtime/ \ndraft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!\nengine: julia\njulia:\n  exeflags:\n    - '-tauto'\n    - '--project'\n---\n\n# Why am I writing about this? \n\nThe current implementation of the rank method for pivoted QR decomposition in julia is slow and inefficient.\nThe modified version proposed here improves run time by orders of magnitude.\n\n# Load necessary packages\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nusing LinearAlgebra\nusing Chairmarks\nusing PrettyChairmarks\nusing Statistics\nimport LinearAlgebra: rank\nusing TidierPlots\nusing DataFrames\n\nTidierPlots_set(\"plot_show\", false)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nfalse\n```\n:::\n:::\n\n\n\n# Computing the rank from a pivoted QR decomposition\n\nLet's generate a $n \\times n$ matrix say $A$ with rank $r$, by first generating a $n \\times r$ matrix and then computing its outerproduct.\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nn = 100\nr = 20\n\nX = randn(n, r)\n\noutprod(X::Matrix) = X * X'\nA = X * X'\n\nπ\n```\n:::\n\n\n\nNow let's compute the pivoted QR factorization of A.\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\nAqr = qr(A, ColumnNorm());\n```\n:::\n\n\n\n# Generate matrix of known rank\n\nThe following function generates a $n \\times m$ matrix of rank $r \\leq \\min(n, m)$.\nWe will use this for benchmarking the implementations.\nThis function was based on a stackoverflow answer [here](https://stackoverflow.com/a/10149972).\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\n# Generate an `n × m` matrix of rank `r`\nfunction generatematrix(n::T, m::T, r::T) where {T<:Integer}\n    A = randn(n, r)\n    B = randn(m, r)\n    return A * B'\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ngeneratematrix (generic function with 1 method)\n```\n:::\n:::\n\n\n\n# Computing the rank\n\nThe current implmentation in the `julia` repo is as follows:\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction rank(A::QRPivoted; atol::Real=0, rtol::Real=min(size(A)...) * eps(real(float(one(eltype(A.Q))))) * iszero(atol))\n    m = min(size(A)...)\n    m == 0 && return 0\n    tol = max(atol, rtol*abs(A.R[1,1]))\n    return something(findfirst(i -> abs(A.R[i,i]) <= tol, 1:m), m+1) - 1\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nrank (generic function with 16 methods)\n```\n:::\n:::\n\n\n\nThe following implementation (`ranfast`) is orders of magnitude faster.\nSee sections below for tests and benchmarks.\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\nfunction rankfast(A::QRPivoted; atol::Real=0, rtol::Real=min(size(A)...) * eps(real(float(one(eltype(A.Q))))) * iszero(atol))\n    m = min(size(A)...)\n    m == 0 && return 0\n    rdiag = diag(getfield(A, :factors))\n    tol = max(atol, rtol*abs(rdiag[1]))\n\n    return something(findfirst(abs.(rdiag) .<= tol), m+1) - 1\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nrankfast (generic function with 1 method)\n```\n:::\n:::\n\n\n\n::: {#14 .cell execution_count=1}\n``` {.julia .cell-code}\nrank(Aqr) == rankfast(Aqr)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\ntrue\n```\n:::\n:::\n\n\n\n::: {#16 .cell execution_count=1}\n``` {.julia .cell-code}\nrankbench = @bs rank($Aqr)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Chairmarks.Benchmark: 483 samples with 1 evaluation.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\"> 81.625 μs</span> … <span class=\"ansi-magenta-fg\">628.916 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span>0.00% … 79.77%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">122.750 μs               </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span>0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">146.210 μs</span> ± <span class=\"ansi-green-fg\"> 90.549 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>8.54% ± 22.74%\n\n  ▇█     ▂<span class=\"ansi-blue-fg\">▂</span>▅  <span class=\"ansi-green-fg\"> </span>                                                  \n  ██▆▇▅▆▆█<span class=\"ansi-blue-fg\">█</span>█▇▆<span class=\"ansi-green-fg\">▃</span>▃▄▁▁▁▂▁▁▁▁▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▂▂▂▂▃▃▄▃▃▃▃▃▃▂▂▁▂ ▃\n  81.6 μs<span class=\"ansi-bright-black-fg\">          Histogram: frequency by time</span>          414 μs <span class=\"ansi-bold\">&lt;</span>\n\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">1.68 MiB</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">67</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n\n::: {#18 .cell execution_count=1}\n``` {.julia .cell-code}\nrankfastbench = @bs rankfast($Aqr)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Chairmarks.Benchmark: 2001 samples with 247 evaluations.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\"> 93.453 ns</span> … <span class=\"ansi-magenta-fg\">44.841 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span>0.00% … 99.50%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">101.721 ns              </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span>0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">191.566 ns</span> ± <span class=\"ansi-green-fg\"> 1.252 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>0.93% ±  9.49%\n\n    ▅█▅<span class=\"ansi-blue-fg\">▁</span>                                                     <span class=\"ansi-green-fg\"> </span>  \n  ▃▅███<span class=\"ansi-blue-fg\">█</span>▇▇▆▄▃▃▂▂▂▂▂▂▂▂▃▃▃▃▃▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▁▁▂▂▂▁▁▂▂▁▁▂▂<span class=\"ansi-green-fg\">▂</span> ▃\n  93.5 ns<span class=\"ansi-bright-black-fg\">         Histogram: frequency by time</span>          194 ns <span class=\"ansi-bold\">&lt;</span>\n\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">1.05 KiB</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">6</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n\n# Varying the rank\n\nNow we generate matrices of size $1000 \\times 100$, with ranks increasing from 1 to 100, to compare the two implementations.\n\n::: {#20 .cell cache='true' execution_count=1}\n``` {.julia .cell-code}\nn = 100; m = 30\n\n\nbenchs = Vector{Chairmarks.Benchmark}()\nbenchf = Vector{Chairmarks.Benchmark}()\n\n\nfor r in 1:min(n,m)\n  _qrA = qr(generatematrix(n, m, r), ColumnNorm())\n  _br = @be rank($_qrA)\n  _brf = @be rankfast($_qrA)\n\n  if (rank(_qrA) != rankfast(_qrA)) \n    println(\"uh oh rank didnt match\") \n  else\n    print(\".\")\n  end\n\n  push!(benchs, _br)\n  push!(benchf, _brf)\nend\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n..............................\n```\n:::\n:::\n\n\n\n::: {#22 .cell execution_count=1}\n``` {.julia .cell-code}\nmedslow = [median(bnc) for bnc in benchs]\nmedfast = [median(bnc) for bnc in benchf]\n```\n:::\n\n\n\n::: {#24 .cell execution_count=1}\n``` {.julia .cell-code}\nxs = collect(1:min(m,n))\n\ndf = DataFrame(\n  rank = xs,\n  median_time = [b.time for b in medslow],\n  median_time_fast = [b.time for b in medfast],\n  medianbytes = [b.bytes for b in medslow],\n  medianbytes_fast = [b.bytes for b in medfast])\n\nggplot(df) +\n  geom_line(\n    @aes(x = rank, y = median_time), color = \"red\"\n  ) +\n  geom_line(\n    @aes(x = rank, y = median_time_fast), color = \"blue\"\n  ) +\n  labs(\n    x = \"rank\", \n    y = \"runtime (in seconds, log scale)\", \n    title = \"runtime of current (red) and faster (blue) method for $n x $m matrix\"\n  ) +\n  scale_y_log10()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<img width=600 height=450 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>\n```\n:::\n:::\n\n\n\n\n::: {#26 .cell execution_count=1}\n``` {.julia .cell-code}\nxs = collect(1:min(m,n))\n\nggplot(df) +\n  geom_line(\n    @aes(x = rank, y = medianbytes), color = \"red\"\n  ) +\n  geom_line(\n    @aes(x = rank, y = medianbytes_fast), color = \"blue\"\n  ) +\n  labs(x = \"rank\", \n  y = \"memory allocated (in bytes, log scale)\", title = \"Median memory allocated of current (red) and faster (blue) method for $n x $m matrix\") +\n  scale_y_log10()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<img width=600 height=450 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>\n```\n:::\n:::\n\n\n\n\n# Why is the current implementaiton so slow?\n\nIt's slow because it calls `Aqr.R` for every diagonal entry,\nwhich leads to computing the upper triangular matrix each time! \nIf `min(n, m)` is large, that can mean recreating this matrix a lot of times!\nThe code below demonstrates this.\n\n::: {#28 .cell execution_count=1}\n``` {.julia .cell-code}\n\nA = generatematrix(10000, 100, 80);\nAqr = qr(A, ColumnNorm());\n```\n:::\n\n\n\n::: {#30 .cell execution_count=1}\n``` {.julia .cell-code}\n@bs for i in 1:min(size(A)...) Aqr.R[i,i] end\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Chairmarks.Benchmark: 58 samples with 1 evaluation.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\">580.625 μs</span> … <span class=\"ansi-magenta-fg\">12.280 ms</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span> 0.00% … 92.54%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">832.229 μs              </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span> 0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">  1.357 ms</span> ± <span class=\"ansi-green-fg\"> 1.920 ms</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>12.46% ± 28.06%\n\n  █▁<span class=\"ansi-blue-fg\">▃</span>   <span class=\"ansi-green-fg\"> </span>                                                       \n  ██<span class=\"ansi-blue-fg\">█</span>▇▄▄<span class=\"ansi-green-fg\">▁</span>▄▃▁▃▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▁▁▁▁▁▁▁▃ ▁\n  581 μs<span class=\"ansi-bright-black-fg\">          Histogram: frequency by time</span>         7.77 ms <span class=\"ansi-bold\">&lt;</span>\n\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">7.64 MiB</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">503</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n\n::: {#32 .cell execution_count=1}\n``` {.julia .cell-code}\n@bs for i in 1:min(size(A)...) Aqr.factors[i,i] end\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Chairmarks.Benchmark: 3267 samples with 5 evaluations.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\">4.883 μs</span> … <span class=\"ansi-magenta-fg\"> 1.323 ms</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span>0.00% … 99.09%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">5.183 μs              </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span>0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">5.652 μs</span> ± <span class=\"ansi-green-fg\">23.065 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>0.03% ±  1.73%\n\n      █▆▄ ▃▅<span class=\"ansi-blue-fg\">▁</span>▅▁▂            <span class=\"ansi-green-fg\"> </span>                                 \n  ▂▂▃▇███▇██<span class=\"ansi-blue-fg\">█</span>███▇▆▄▄▆▄▄▄▃▃▃▃<span class=\"ansi-green-fg\">▃</span>▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▂▂▂ ▃\n  4.88 μs<span class=\"ansi-bright-black-fg\">        Histogram: frequency by time</span>        6.62 μs <span class=\"ansi-bold\">&lt;</span>\n\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">4.77 KiB</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">203</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n\n::: {#34 .cell execution_count=1}\n``` {.julia .cell-code}\n@bs Aqr.R[1,1]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Chairmarks.Benchmark: 9726 samples with 1 evaluation.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\">3.791 μs</span> … <span class=\"ansi-magenta-fg\"> 4.389 ms</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span>0.00% … 99.24%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">6.625 μs              </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span>0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">8.505 μs</span> ± <span class=\"ansi-green-fg\">56.387 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>0.19% ±  4.33%\n\n   ▃               ▄█▅<span class=\"ansi-blue-fg\">▅</span>▂▁          <span class=\"ansi-green-fg\"> </span>                          \n  ▅█▆▃▂▁▁▁▁▁▁▁▁▁▁▁▂███<span class=\"ansi-blue-fg\">█</span>██▅▅▆▄▄▃▃▃▂▂<span class=\"ansi-green-fg\">▂</span>▂▂▂▂▁▂▂▂▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁ ▂\n  3.79 μs<span class=\"ansi-bright-black-fg\">        Histogram: frequency by time</span>          12 μs <span class=\"ansi-bold\">&lt;</span>\n\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">78.33 KiB</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">8</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n\n::: {#36 .cell execution_count=1}\n``` {.julia .cell-code}\n@bs Aqr.factors[1,1]\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Chairmarks.Benchmark: 3103 samples with 1027 evaluations.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\">25.357 ns</span> … <span class=\"ansi-magenta-fg\"> 3.915 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span>0.00% … 98.69%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">27.670 ns              </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span>0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">29.405 ns</span> ± <span class=\"ansi-green-fg\">69.784 ns</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>0.03% ±  1.77%\n\n   ▂▁         ▆█<span class=\"ansi-blue-fg\">█</span>▄▁▁▄▃▁  ▂▄<span class=\"ansi-green-fg\">▅</span>▂                                 ▁\n  ▃██▇▃▄▁▁▁▁▁███<span class=\"ansi-blue-fg\">█</span>██████▆▇██<span class=\"ansi-green-fg\">█</span>█▇▅▆▆▅▄▆▇▆▅▆▆▇▅▃▆▅▅▅▃▁▃▅▄▅▅▄▃▃▁▄▅ █\n  25.4 ns<span class=\"ansi-bright-black-fg\">      </span><span class=\"ansi-bright-black-fg\">Histogram: </span><span class=\"ansi-bright-black-fg ansi-bold\">log(</span><span class=\"ansi-bright-black-fg\">frequency</span><span class=\"ansi-bright-black-fg ansi-bold\">)</span><span class=\"ansi-bright-black-fg\"> by time</span>      35.1 ns <span class=\"ansi-bold\">&lt;</span>\n\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">16.109055501460563 bytes</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">1</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n\n# Alloc can get bad for large matrices!\n\nIf the matrix is large (even if the rank is small), the current method allocates too much!\nSee example below.\n\n::: {#38 .cell execution_count=1}\n``` {.julia .cell-code}\nMqr = qr(generatematrix(1000, 100, 50), ColumnNorm());\n```\n:::\n\n\n\nThe current implementation allocated ~400 megabytes and takes on the order of 100 ms to run!\n\n::: {#40 .cell execution_count=1}\n``` {.julia .cell-code}\n@bs rank($Mqr)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Chairmarks.Benchmark: 199 samples with 1 evaluation.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\">201.916 μs</span> … <span class=\"ansi-magenta-fg\">  3.167 ms</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span>0.00% … 86.66%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">356.041 μs               </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span>0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">446.917 μs</span> ± <span class=\"ansi-green-fg\">349.170 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>7.06% ± 21.86%\n\n  ▂  ▁▃▇█<span class=\"ansi-blue-fg\">▆</span>▅▂ <span class=\"ansi-green-fg\"> </span>                                                   \n  █▆█████<span class=\"ansi-blue-fg\">█</span>███<span class=\"ansi-green-fg\">▆</span>▆▄▄▁▄▆▄▁▁▁▁▁▁▁▁▁▁▁▁▄▁▁▁▆▆█▁▁▁▁▄▄▁▆▆▁▁▁▁▁▁▄▁▁▁▁▁▁▄ ▄\n  202 μs<span class=\"ansi-bright-black-fg\">        </span><span class=\"ansi-bright-black-fg\">Histogram: </span><span class=\"ansi-bright-black-fg ansi-bold\">log(</span><span class=\"ansi-bright-black-fg\">frequency</span><span class=\"ansi-bright-black-fg ansi-bold\">)</span><span class=\"ansi-bright-black-fg\"> by time</span>       1.57 ms <span class=\"ansi-bold\">&lt;</span>\n\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">3.97 MiB</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">157</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n\nThe faster method only allocates ~10 kilobytes and the runtime is in μs!!\n\n::: {#42 .cell execution_count=1}\n``` {.julia .cell-code}\n@bs rankfast($Mqr)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Chairmarks.Benchmark: 4110 samples with 136 evaluations.\n Range <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-cyan-fg ansi-bold\">min</span> … <span class=\"ansi-magenta-fg\">max</span><span class=\"ansi-bright-black-fg\">):  </span><span class=\"ansi-cyan-fg ansi-bold\"> 87.618 ns</span> … <span class=\"ansi-magenta-fg\">48.789 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>min … max<span class=\"ansi-bright-black-fg\">): </span>0.00% … 99.46%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-blue-fg ansi-bold\">median</span><span class=\"ansi-bright-black-fg\">):     </span><span class=\"ansi-blue-fg ansi-bold\">106.316 ns              </span><span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>median<span class=\"ansi-bright-black-fg\">):    </span>0.00%\n Time  <span class=\"ansi-bright-black-fg\">(</span><span class=\"ansi-green-fg ansi-bold\">mean</span> ± <span class=\"ansi-green-fg\">σ</span><span class=\"ansi-bright-black-fg\">):   </span><span class=\"ansi-green-fg ansi-bold\">160.863 ns</span> ± <span class=\"ansi-green-fg\"> 1.171 μs</span>  <span class=\"ansi-bright-black-fg\">┊</span> GC <span class=\"ansi-bright-black-fg\">(</span>mean ± σ<span class=\"ansi-bright-black-fg\">):  </span>0.22% ±  4.63%\n\n            ▂▁▂▄██<span class=\"ansi-blue-fg\">▅</span>▇▆▁                                          \n  ▁▁▂▃▄▄▃▅█▇██████<span class=\"ansi-blue-fg\">█</span>███▇▅▃▂▂▁▁▂▂▂▂▂▂▂▃▄▃▅▅▄▄▄▃▂▃▃▂▂▂▁▁▁▁▁▂▁▁▁▁▁ ▃\n  87.6 ns<span class=\"ansi-bright-black-fg\">         Histogram: frequency by time</span>          156 ns <span class=\"ansi-bold\">&lt;</span>\n\n Memory estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">1.05 KiB</span>, allocs estimate<span class=\"ansi-bright-black-fg\">: </span><span class=\"ansi-yellow-fg\">6</span>.</pre>\n```\n:::\n\n:::\n:::\n\n\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}